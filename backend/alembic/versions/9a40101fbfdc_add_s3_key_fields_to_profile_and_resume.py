"""add_s3_key_fields_to_profile_and_resume

Revision ID: 9a40101fbfdc
Revises: bbca5f148aae
Create Date: 2025-08-21 22:28:16.467454

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '9a40101fbfdc'
down_revision: Union[str, None] = 'bbca5f148aae'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Check if columns exist before adding them to avoid duplicate column errors
    from alembic import context
    conn = context.get_bind()
    
    # Check if resume_s3_key column exists in profiles table
    result = conn.execute(sa.text("""
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name='profiles' AND column_name='resume_s3_key'
    """))
    if not result.fetchone():
        op.add_column('profiles', sa.Column('resume_s3_key', sa.String(), nullable=True))
    
    # Check if content_s3_key column exists in resumes table
    result = conn.execute(sa.text("""
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name='resumes' AND column_name='content_s3_key'
    """))
    if not result.fetchone():
        op.add_column('resumes', sa.Column('content_s3_key', sa.String(), nullable=True))
        op.execute("UPDATE resumes SET content_s3_key = '' WHERE content_s3_key IS NULL")
        op.alter_column('resumes', 'content_s3_key', nullable=False)
    else:
        # Column exists, but ensure it's not null and has default empty string
        op.execute("UPDATE resumes SET content_s3_key = '' WHERE content_s3_key IS NULL")
        # Check if column is nullable and make it not null if needed
        result = conn.execute(sa.text("""
            SELECT is_nullable 
            FROM information_schema.columns 
            WHERE table_name='resumes' AND column_name='content_s3_key'
        """))
        is_nullable = result.fetchone()
        if is_nullable and is_nullable[0] == 'YES':
            op.alter_column('resumes', 'content_s3_key', nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('resumes', 'content_s3_key')
    op.drop_column('profiles', 'resume_s3_key')
    # ### end Alembic commands ###
